import { supabase } from "@/integrations/supabase/client";
import { RunwareService, type GenerateImageParams as RunwareParams } from "./runwareService";

export interface ImageGenerationOptions {
  prompt: string;
  size?: '1024x1024' | '1792x1024' | '1024x1792';
  quality?: 'hd' | 'standard';
  provider?: 'dalle' | 'runware';
  // Options avanc√©es Runware pour fid√©lit√©
  cfgScale?: number; // 1-20, plus √©lev√© = plus fid√®le
  steps?: number; // 1-50, plus √©lev√© = plus de d√©tails
  scheduler?: string;
  seed?: number;
}

export interface ImageEditOptions {
  image: File;
  prompt: string;
  mask?: File;
  size?: '1024x1024' | '1792x1024' | '1024x1792';
  quality?: 'hd' | 'standard';
}

export interface ImageVariationOptions {
  image: File;
  n?: number;
  size?: '1024x1024' | '512x512' | '256x256';
  quality?: 'hd' | 'standard';
}

// Instance globale Runware (sera initialis√©e si cl√© API disponible)
let runwareInstance: RunwareService | null = null;

/**
 * Service centralis√© pour toutes les op√©rations d'images
 * Supporte DALL-E (OpenAI) et Runware pour plus de fid√©lit√©
 */
export class ImageService {
  
  /**
   * Initialise Runware si cl√© API disponible
   */
  static async initRunware(apiKey?: string): Promise<boolean> {
    try {
      if (apiKey) {
        runwareInstance = new RunwareService(apiKey);
        console.log("üöÄ Runware initialis√© avec cl√© API fournie");
        return true;
      }
      
      // Tenter de r√©cup√©rer depuis Supabase
      const { data, error } = await supabase.functions.invoke('get-runware-key');
      if (!error && data?.apiKey) {
        runwareInstance = new RunwareService(data.apiKey);
        console.log("üöÄ Runware initialis√© depuis Supabase");
        return true;
      }
      
      console.log("‚ö†Ô∏è Runware non disponible (pas de cl√© API)");
      return false;
    } catch (error) {
      console.error("‚ùå Erreur initialisation Runware:", error);
      return false;
    }
  }

  /**
   * G√©n√®re une image avec le meilleur provider disponible
   * Runware pour la fid√©lit√©, DALL-E en fallback
   */
  static async generateImage(options: ImageGenerationOptions): Promise<string> {
    const prompt = this.enhancePromptForFidelity(options.prompt);
    
    // Essayer Runware en premier si disponible et demand√©
    if (options.provider === 'runware' || (!options.provider && runwareInstance)) {
      try {
        console.log('üé® G√©n√©ration avec Runware (fid√©lit√© maximale):', prompt);
        
        const [width, height] = this.parseSizeForRunware(options.size || '1024x1024');
        const result = await runwareInstance!.generateImage({
          positivePrompt: prompt,
          width,
          height,
          CFGScale: options.cfgScale || 12, // Fid√©lit√© √©lev√©e
          steps: options.steps || 25, // Plus de d√©tails
          scheduler: options.scheduler || "DPMSolverMultistepScheduler",
          promptWeighting: "compel", // Meilleur suivi du prompt
          seed: options.seed,
        });
        
        if (result.imageURL) {
          return result.imageURL;
        }
      } catch (error) {
        console.error('‚ùå Erreur Runware, fallback vers DALL-E:', error);
      }
    }

    // Fallback vers DALL-E
    console.log('üé® G√©n√©ration avec DALL-E 3:', prompt);
    const { data, error } = await supabase.functions.invoke('dalle-image', {
      body: {
        prompt,
        size: options.size || '1024x1024',
        quality: options.quality || 'hd'
      }
    });

    if (error) {
      console.error('‚ùå Erreur g√©n√©ration DALL-E:', error);
      throw new Error(`√âchec de g√©n√©ration d'image: ${error.message}`);
    }

    if (!data?.image) {
      throw new Error('Aucune image retourn√©e');
    }

    return data.image;
  }

  /**
   * √âdite une image existante avec DALL-E 2
   * Force toujours l'utilisation de DALL-E, ignore le mod√®le frontend
   */
  static async editImage(options: ImageEditOptions): Promise<string> {
    console.log('‚úèÔ∏è √âdition d\'image avec DALL-E 2:', options.prompt);

    const formData = new FormData();
    formData.append('prompt', options.prompt);
    formData.append('image', options.image);
    formData.append('size', options.size || '1024x1024');
    formData.append('quality', options.quality || 'hd');
    
    if (options.mask) {
      formData.append('mask', options.mask);
    }

    const { data, error } = await supabase.functions.invoke('openai-image-edit', {
      body: formData
    });

    if (error) {
      console.error('Erreur √©dition DALL-E:', error);
      throw new Error(`√âchec d'√©dition d'image avec DALL-E: ${error.message}`);
    }

    if (!data?.image) {
      throw new Error('Aucune image √©dit√©e retourn√©e par DALL-E');
    }

    return data.image;
  }

  /**
   * Cr√©e des variations d'une image avec DALL-E 2
   * Force toujours l'utilisation de DALL-E, ignore le mod√®le frontend
   */
  static async createVariations(options: ImageVariationOptions): Promise<string[]> {
    console.log('üé≠ Cr√©ation de variations avec DALL-E 2, nombre:', options.n || 2);

    const formData = new FormData();
    formData.append('image', options.image);
    formData.append('size', options.size || '1024x1024');
    formData.append('quality', options.quality || 'hd');
    formData.append('n', (options.n || 2).toString());

    const { data, error } = await supabase.functions.invoke('openai-image-variations', {
      body: formData
    });

    if (error) {
      console.error('Erreur variations DALL-E:', error);
      throw new Error(`√âchec de cr√©ation de variations avec DALL-E: ${error.message}`);
    }

    if (!data?.images || !Array.isArray(data.images)) {
      throw new Error('Aucune variation retourn√©e par DALL-E');
    }

    return data.images;
  }

  /**
   * D√©tecte si un message demande une g√©n√©ration d'image
   */
  static isImageRequest(message: string): boolean {
    const imageKeywords = [
      'image', 'photo', 'picture', 'illustration', 'dessin', 'logo', 'affiche',
      'g√©n√®re une image', 'genere une image', 'g√©n√©rer une image', 
      'cr√©e une image', 'create an image', 'generate an image',
      'draw', 'paint', 'sketch', 'artwork'
    ];
    
    return imageKeywords.some(keyword => 
      new RegExp(`\\b${keyword}\\b`, 'i').test(message)
    );
  }

  /**
   * Am√©liore les prompts pour une fid√©lit√© maximale aux descriptions
   */
  static enhancePromptForFidelity(prompt: string): string {
    // Si le prompt est d√©j√† d√©taill√©, le conserver
    if (prompt.length > 50 && prompt.includes(',')) {
      return prompt;
    }
    
    // Ajouter des d√©tails pour am√©liorer la fid√©lit√©
    const enhancements = [
      "highly detailed",
      "realistic",
      "sharp focus", 
      "professional quality",
      "8k resolution"
    ];
    
    return `${prompt}, ${enhancements.join(', ')}`;
  }

  /**
   * Convertit les tailles DALL-E vers les dimensions Runware
   */
  static parseSizeForRunware(size: string): [number, number] {
    switch (size) {
      case '1792x1024': return [1792, 1024];
      case '1024x1792': return [1024, 1792]; 
      default: return [1024, 1024];
    }
  }
}